// Generated by CoffeeScript 1.3.3
(function() {
  var namespace,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  namespace = function(target, name, block) {
    var item, top, _i, _len, _ref, _ref1;
    if (arguments.length < 3) {
      _ref = [(typeof exports !== 'undefined' ? exports : window)].concat(__slice.call(arguments)), target = _ref[0], name = _ref[1], block = _ref[2];
    }
    top = target;
    _ref1 = name.split('.');
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      item = _ref1[_i];
      target = target[item] || (target[item] = {});
    }
    return block(target, top);
  };

  jQuery(function() {
    var ClockModel, ClockView;
    ClockView = (function(_super) {

      __extends(ClockView, _super);

      function ClockView() {
        this.render = __bind(this.render, this);

        this.updateModel = __bind(this.updateModel, this);

        this.initialize = __bind(this.initialize, this);
        return ClockView.__super__.constructor.apply(this, arguments);
      }

      ClockView.prototype.template = $('#clock-view-template').template();

      ClockView.prototype.initialize = function() {
        this.model.bind('change', this.render);
        return this.model.view = this;
      };

      ClockView.prototype.updateModel = function() {
        var hour, minute, second;
        hour = this.model.get('hour');
        minute = this.model.get('minute');
        second = this.model.get('second');
        second = second + 1;
        if (second > 59) {
          second = 0;
          minute = minute + 1;
        }
        if (minute > 59) {
          minute = 0;
          hour = hour + 1;
        }
        if (hour > 23) {
          hour = 0;
        }
        return this.model.set({
          'hour': hour,
          'minute': minute,
          'second': second
        });
      };

      ClockView.prototype.render = function() {
        $(this.el).html($.tmpl(this.template, this.model.toJSON()));
        setTimeout(this.updateModel, 1000);
        return this;
      };

      return ClockView;

    })(Backbone.View);
    namespace("BackboneTest.Views", function(exports) {
      return exports.ClockView = ClockView;
    });
    ClockModel = (function(_super) {

      __extends(ClockModel, _super);

      function ClockModel() {
        return ClockModel.__super__.constructor.apply(this, arguments);
      }

      ClockModel.prototype.defaults = {
        hour: 0,
        minute: 0,
        second: 0
      };

      return ClockModel;

    })(Backbone.Model);
    return namespace("BackboneTest.Models", function(exports) {
      return exports.ClockModel = ClockModel;
    });
  });

  jQuery(function() {
    var AppView, view;
    AppView = (function(_super) {

      __extends(AppView, _super);

      function AppView() {
        this.render = __bind(this.render, this);
        return AppView.__super__.constructor.apply(this, arguments);
      }

      AppView.prototype.el = $('body');

      AppView.prototype.render = function() {
        var hour, minute, second, time;
        time = new Date();
        hour = time.getHours();
        minute = time.getMinutes();
        second = time.getSeconds();
        this.clockModel = new BackboneTest.Models.ClockModel({
          hour: hour,
          minute: minute,
          second: second
        });
        this.clockView = new BackboneTest.Views.ClockView({
          model: this.clockModel
        });
        $(this.el).append(this.clockView.render().el);
        return this;
      };

      return AppView;

    })(Backbone.View);
    view = new AppView();
    return view.render();
  });

}).call(this);
